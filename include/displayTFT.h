#ifndef DISPLAYTFT_H
#define DISPLAYTFT_H

#define TOUCH_CS -1 // Define TOUCH_CS to suppress the warning
#include <SPI.h>
#include <TFT_eSPI.h>

// TFT display

#if defined(ESP8266)
#define BACKLIIGHT_PIN 12
#elif defined(ESP32)
#define BACKLIIGHT_PIN 4
#endif

#define BRIGHTNESS_TFT_MIN 0
#define BRIGHTNESS_TFT_MAX 255

#define DARKER_GREY 0x18E3
#define SPECIAL_BLUE 0x24ae

struct DisplayDataTFT {
    int16_t totalPower=0;      // indicate current power (W)
    float totalYieldDay=0.0f;   // indicate day yield (Wh)
    float totalYieldTotal=0.0f; // indicate total yield (kWh)
    const char *formattedTime=nullptr;
    const char *version=nullptr;
    uint8_t powerLimit=0;
    uint8_t rssiGW=0;
    uint8_t rssiDTU=0;
    boolean remoteDisplayActive = false;
};

class DisplayTFT {
    public:
        DisplayTFT();
        void setup();
        void renderScreen(String time, String version);
        void drawFactoryMode(String version, String apName, String ip);
        void drawUpdateMode(String text,String text2="", boolean blank=true);
        void setRemoteDisplayMode(bool remoteDisplayActive);
    private:
        void drawScreen(String version, String time);
        void drawHeader(String version);
        void drawFooter(String time);

        void drawMainDTUOnline(bool pause=false);
        void drawMainDTUOffline();

        void checkChangedValues();

        void checkNightMode();
        void setBrightnessAuto();

        // private member variables
        DisplayDataTFT lastDisplayData;
        uint8_t brightness=BRIGHTNESS_TFT_MIN;
        uint8_t offset_x = 0; // shifting for anti burn in effect
        uint8_t offset_y = 0; // shifting for anti burn in effect
        bool valueChanged = false;
        boolean isNight = false;
        uint8_t displayState = 0; // local state machine
        uint8_t displayStateOld = 0; // local state machine
        uint16_t displayTicks = 0; // local timer state machine

        void showDebug();
        void printProcessorName(void);
        int8_t getPinName(int8_t pin);
};

// Icon width and height
const uint16_t cloudWidth = 32;
const uint16_t cloudHeight = 26;

const unsigned short cloud[0x340] PROGMEM ={
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00E3,   // 0x0010 (16)
0x00A1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02EA, 0x0532, 0x0635, 0x0696,   // 0x0030 (48)
0x0676, 0x0655, 0x0510, 0x0206, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02AA, 0x06B9, 0x06FA, 0x06F9, 0x06F8, 0x06F8,   // 0x0050 (80)
0x06F8, 0x0738, 0x0799, 0x07D9, 0x06B5, 0x0123, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03F0, 0x06DB, 0x0699, 0x0638, 0x0657, 0x0677, 0x0697,   // 0x0070 (112)
0x0697, 0x06B7, 0x06D7, 0x06F7, 0x07B9, 0x07D9, 0x0206, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0080 (128)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x036E, 0x067B, 0x0618, 0x05F8, 0x0618, 0x0638, 0x0658, 0x0677,   // 0x0090 (144)
0x0677, 0x0697, 0x06B7, 0x06D7, 0x06D7, 0x0778, 0x0799, 0x0144, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00A0 (160)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0125, 0x063B, 0x05D9, 0x05D8, 0x05F8, 0x05F8, 0x0618, 0x0638, 0x0658,   // 0x00B0 (176)
0x0657, 0x0677, 0x0697, 0x06B7, 0x06B7, 0x06D7, 0x0799, 0x06B6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00C0 (192)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0495, 0x05FB, 0x0598, 0x05B8, 0x05B8, 0x05D8, 0x05F8, 0x0618, 0x0638,   // 0x00D0 (208)
0x0699, 0x0658, 0x0677, 0x0677, 0x0697, 0x06B7, 0x06D7, 0x0799, 0x02C9, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00E0 (224)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0082, 0x05BA, 0x0579, 0x0579, 0x0598, 0x0598, 0x05B8, 0x05D8, 0x0639, 0x05F7,   // 0x00F0 (240)
0x04F3, 0x0658, 0x0678, 0x0657, 0x0677, 0x0697, 0x06B7, 0x0759, 0x05D4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0100 (256)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x020A, 0x059B, 0x0539, 0x0559, 0x0579, 0x0578, 0x0598, 0x05F9, 0x05B8, 0x0166,   // 0x0110 (272)
0x0000, 0x028A, 0x0679, 0x0678, 0x0657, 0x0677, 0x0697, 0x06D8, 0x06F8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0120 (288)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x028D, 0x055B, 0x0519, 0x0539, 0x0539, 0x0558, 0x05BA, 0x0578, 0x0145, 0x0000,   // 0x0130 (304)
0x0000, 0x0000, 0x0269, 0x0679, 0x0658, 0x0657, 0x0677, 0x0698, 0x06D8, 0x0490, 0x01C5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0140 (320)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02AE, 0x053B, 0x04F9, 0x0519, 0x0519, 0x0559, 0x0518, 0x0125, 0x0000, 0x0000,   // 0x0150 (336)
0x0000, 0x0000, 0x0000, 0x0249, 0x0638, 0x0638, 0x0638, 0x0657, 0x0677, 0x0719, 0x075A, 0x0635, 0x0185, 0x0000, 0x0000, 0x0000,   // 0x0160 (352)
0x0000, 0x0000, 0x0000, 0x0000, 0x00C5, 0x0374, 0x04BA, 0x04DA, 0x04D9, 0x04F9, 0x04F9, 0x059B, 0x030E, 0x0000, 0x0000, 0x0041,   // 0x0170 (368)
0x0000, 0x0041, 0x0000, 0x0000, 0x04D3, 0x0659, 0x0618, 0x0638, 0x0658, 0x0677, 0x0698, 0x0739, 0x077A, 0x02CA, 0x0000, 0x0000,   // 0x0180 (384)
0x0000, 0x0000, 0x0000, 0x022E, 0x04BC, 0x04DC, 0x049A, 0x0499, 0x04B9, 0x04D9, 0x04D9, 0x051A, 0x0497, 0x0209, 0x03F3, 0x01A8,   // 0x0190 (400)
0x0000, 0x024A, 0x038F, 0x026A, 0x05B8, 0x05F8, 0x05F8, 0x0618, 0x0638, 0x0658, 0x0657, 0x0677, 0x06D8, 0x075A, 0x0207, 0x0000,   // 0x01A0 (416)
0x0000, 0x0000, 0x022E, 0x049D, 0x045B, 0x043A, 0x045A, 0x047A, 0x049A, 0x0499, 0x04B9, 0x04D9, 0x051A, 0x057B, 0x05BC, 0x0146,   // 0x01B0 (432)
0x0000, 0x024A, 0x063C, 0x05FA, 0x05B9, 0x05B8, 0x05D8, 0x05F8, 0x0618, 0x0638, 0x0638, 0x0658, 0x0677, 0x06F9, 0x06D8, 0x0020,   // 0x01C0 (448)
0x0000, 0x00A4, 0x043D, 0x041B, 0x041A, 0x041A, 0x043A, 0x045A, 0x047A, 0x047A, 0x0499, 0x04B9, 0x04D9, 0x04F9, 0x055B, 0x0146,   // 0x01D0 (464)
0x0000, 0x022A, 0x05DA, 0x0579, 0x0598, 0x0598, 0x05B8, 0x05D8, 0x05F8, 0x05F8, 0x0618, 0x0638, 0x0658, 0x0657, 0x0719, 0x02EA,   // 0x01E0 (480)
0x0000, 0x02D4, 0x041D, 0x03DA, 0x03FA, 0x03FA, 0x041A, 0x043A, 0x045A, 0x045A, 0x047A, 0x0499, 0x04B9, 0x04D9, 0x053B, 0x0146,   // 0x01F0 (496)
0x0000, 0x020A, 0x059B, 0x0559, 0x0579, 0x0578, 0x0598, 0x05B8, 0x05D8, 0x05D8, 0x05F8, 0x0618, 0x0638, 0x0638, 0x06D9, 0x0553,   // 0x0200 (512)
0x0043, 0x035A, 0x03BC, 0x03BA, 0x03DA, 0x03DA, 0x03FA, 0x041A, 0x043A, 0x043A, 0x045A, 0x047A, 0x049A, 0x049A, 0x051B, 0x0146,   // 0x0210 (528)
0x0000, 0x020A, 0x057B, 0x0539, 0x0559, 0x0559, 0x0578, 0x0598, 0x05B8, 0x05B8, 0x05D8, 0x05F8, 0x0618, 0x0618, 0x0679, 0x05F6,   // 0x0220 (544)
0x01D0, 0x035B, 0x037B, 0x039B, 0x039B, 0x03BA, 0x03DA, 0x03FA, 0x03FA, 0x041A, 0x043A, 0x045A, 0x045A, 0x047A, 0x04DB, 0x0126,   // 0x0230 (560)
0x0000, 0x020A, 0x055B, 0x0519, 0x0539, 0x0539, 0x0559, 0x0579, 0x0598, 0x0598, 0x05B8, 0x05D8, 0x05F8, 0x05F8, 0x0659, 0x05F7,   // 0x0240 (576)
0x0253, 0x033B, 0x035B, 0x037B, 0x037B, 0x039B, 0x03BA, 0x03DA, 0x03DA, 0x03FA, 0x041A, 0x043A, 0x043A, 0x045A, 0x04BB, 0x0126,   // 0x0250 (592)
0x0000, 0x01EA, 0x053B, 0x04F9, 0x04F9, 0x0519, 0x0539, 0x0559, 0x0559, 0x0578, 0x0598, 0x05B8, 0x05B8, 0x05D8, 0x0639, 0x05B7,   // 0x0260 (608)
0x014B, 0x031B, 0x033C, 0x035B, 0x035B, 0x037B, 0x039B, 0x03BB, 0x03BA, 0x03DA, 0x03FA, 0x041A, 0x041A, 0x043A, 0x049B, 0x0106,   // 0x0270 (624)
0x0000, 0x01CA, 0x051B, 0x04D9, 0x04D9, 0x04F9, 0x0519, 0x0539, 0x0539, 0x0559, 0x0579, 0x0598, 0x0598, 0x05B8, 0x063A, 0x0514,   // 0x0280 (640)
0x0000, 0x02B9, 0x033D, 0x031B, 0x033B, 0x035B, 0x037B, 0x037B, 0x039B, 0x03BA, 0x03DA, 0x03FA, 0x03FA, 0x041A, 0x047C, 0x0127,   // 0x0290 (656)
0x0000, 0x020B, 0x04DC, 0x04B9, 0x04B9, 0x04D9, 0x04F9, 0x0519, 0x0519, 0x0539, 0x0559, 0x0579, 0x0578, 0x0598, 0x063A, 0x02EC,   // 0x02A0 (672)
0x0000, 0x018F, 0x033E, 0x02FB, 0x031B, 0x033B, 0x035B, 0x035B, 0x037B, 0x039B, 0x03BA, 0x03BA, 0x03DA, 0x03FA, 0x043B, 0x0355,   // 0x02B0 (688)
0x020C, 0x03D7, 0x049A, 0x047A, 0x0499, 0x04B9, 0x04D9, 0x04D9, 0x04F9, 0x0519, 0x0539, 0x0559, 0x0559, 0x05DA, 0x05FA, 0x0020,   // 0x02C0 (704)
0x0000, 0x0000, 0x02FD, 0x031E, 0x02FB, 0x031B, 0x033B, 0x033B, 0x035B, 0x037B, 0x039B, 0x039B, 0x03BA, 0x03DA, 0x03DA, 0x043B,   // 0x02D0 (720)
0x047C, 0x045B, 0x043A, 0x045A, 0x047A, 0x0499, 0x04B9, 0x04B9, 0x04D9, 0x04F9, 0x0519, 0x0519, 0x057A, 0x05FB, 0x0229, 0x0000,   // 0x02E0 (736)
0x0000, 0x0000, 0x0064, 0x02FE, 0x031E, 0x02FC, 0x02FB, 0x031B, 0x033B, 0x035B, 0x037B, 0x037B, 0x039B, 0x03BA, 0x03DA, 0x03DA,   // 0x02F0 (752)
0x03FA, 0x041A, 0x043A, 0x043A, 0x045A, 0x047A, 0x049A, 0x0499, 0x04B9, 0x04D9, 0x04F9, 0x055B, 0x05BC, 0x02CD, 0x0000, 0x0000,   // 0x0300 (768)
0x0000, 0x0000, 0x0000, 0x0022, 0x029A, 0x031F, 0x031E, 0x033D, 0x033D, 0x035D, 0x037D, 0x039D, 0x03BC, 0x03BC, 0x03DC, 0x03FC,   // 0x0310 (784)
0x041C, 0x043C, 0x043C, 0x045C, 0x047B, 0x049B, 0x04BB, 0x04BB, 0x04DB, 0x051C, 0x055C, 0x051A, 0x01A8, 0x0000, 0x0000, 0x0000,   // 0x0320 (800)
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00A7, 0x01D2, 0x0256, 0x0297, 0x0297, 0x0297, 0x02B7, 0x02D7, 0x02D7, 0x02F7, 0x0317,   // 0x0330 (816)
0x0316, 0x0336, 0x0356, 0x0356, 0x0376, 0x0396, 0x0396, 0x03B6, 0x03B5, 0x0311, 0x0168, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0340 (832)
};


#endif // DISPLAYTFT_H